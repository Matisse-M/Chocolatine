##
## EPITECH PROJECT, 2023
## chocolatine
## File description:
## First use of github workflow
##

name: chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-NAN-2-1-chocolatine-matisse.marsac.git"
  EXECUTABLES: "secured"
  AUTHORIZED: "write,malloc,free"

jobs:
  Check Repository to Start Jobs:
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Target Repository
        run: |
          temp=$(echo $MIRROR_URL | cut -d ':' -f 2 | sed "s/\.git//")
          if [ $temp = ${{ github.repository }} ]; then
            printf "::notice::The current repository is also the target repository\n"
            exit 1
          fi

  Check Any Coding Style Errors:
    needs: [Check Repository to Start Jobs]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4

      - name: Run Coding-Style-Checker
        run: check.sh $(pwd) $(pwd)

      - name: Check Any Error
        run: |
          cat coding-style-reports.log | while read line; do
            TYPE=$(echo $line | cut -d ':' -f 3 | cut -c 2-)
            temp=$(echo $line | cut -d ':' -f 1)
            NAME=$(echo $temp | cut -d '/' -f 2)
            LINE=$(echo $line | cut -d ':' -f 2)
            NBR=$(echo $line | cut -d ':' -f 4)
            ERROR=$(printf "%s coding style error" "$TYPE")
            echo "::error file=$NAME,line=$LINE,title=$ERROR::$NBR"
          done
          if [ -s coding-style-reports.log ]; then
            exit 1
          else
            exit 0
          fi

  Check Program Compilation:
    needs: [Check Any Coding Style Errors]
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
      - name: Compilation
        run: make
        timeout-minutes: 2
      - name: Clean
        run: make clean
      - name: Check Executables
        run: |
          IFS=',' read -ra array <<< "$EXECUTABLES"
          for arg in "${array[@]}"; do
            if [ ! -x "$arg" && ! -f "$arg" ]; then
              printf "::error::%s does not exist or is not executable" "$arg"
              exit 1
            fi
          done
          exit 0

  Run Unit Tests:
    needs: [Check Program Compilation]
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
      - name: Run Unit Tests
        run: make tests_run
        timeout-minutes: 2

  Check Banned Functions in Executables:
    needs: [Run Unit Tests]
    if: ${{ needs.check_repository.outputs.target == 0 }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: run-compilation
        run: make re
        timeout-minutes: 2
      - name: check-banned
        run: |
          IFS=',' read -ra array <<< "${{ env.EXECUTABLES }}"
          IFS=',' read -ra auth <<< "${{ env.AUTHORIZED }}"
          for arg in "${array[@]}"; do
            commands=$(nm "$arg" | grep " U " | sed 's/^.* U \([^@]*\).*/\1/'| grep -v '__*')
            temp=()
            readarray -t temp <<< "$commands"
            for cmd in "${temp[@]}"; do
              authorized=false
              for func in "${auth[@]}"; do
                if [[ "$cmd" == "$func" ]]; then
                  authorized=true
                  break
                fi
              done
              if [[ $authorized == false ]]; then
                echo "::error title=Unauthorized function used::$cmd"
                exit 1
              fi
            done
          done
          exit 0

  Push to Target Repository:
    needs: [Check Banned Functions in Executables]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Repository Mirroring
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
