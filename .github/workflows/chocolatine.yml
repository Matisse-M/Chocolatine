##
## EPITECH PROJECT, 2023
## chocolatine
## File description:
## First use of github workflow
##

name: chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-NAN-2-1-chocolatine-matisse.marsac.git"
  EXECUTABLES: "hashtable.a,secured"
  AUTHORIZED: "write,malloc,free"

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: is_correct_repository
        run: temp=$(echo $MIRROR_URL | cut -d ':' -f 2 | tail -c 4) && printf "::warning::%s\n" "$temp" && printf "::warning::%s\n" "${{ github.repository }}"
      - name: run-coding-style
        run: check.sh $(pwd) $(pwd)
      - name: check_any_error
        run: |
          cat coding-style-reports.log | while read line; do
            TYPE=$(echo $line | cut -d ':' -f 3 | cut -c 2-)
            temp=$(echo $line | cut -d ':' -f 1)
            NAME=$(echo $temp | cut -d '/' -f 2)
            LINE=$(echo $line | cut -d ':' -f 2)
            NBR=$(echo $line | cut -d ':' -f 4)
            printf "::error::%s coding style error: %s#L%s\n%s\n" "$TYPE" "$NAME" "$LINE" "$NBR"
          done
      - name: continue
        run: |
          if [ -s coding-style-reports.log ]; then
            exit 1
          else
            exit 0
          fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: run-compilation
        run: make
        timeout-minutes: 2
      - name: run-clean
        run: |
          make clean
      - name: check-executables
        run: |
          IFS=',' read -ra array <<< "$EXECUTABLES"
          for arg in "${array[@]}"; do
            if [ ! -x "$arg" && ! -f "$arg" ]; then
              printf "::error::%s does not exist or is not executable" "$arg"
              exit 1
            fi
          done
          exit 0

  # check_banned_functions:
  #   needs: check_program_compilation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout@v4
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: run-compilation
  #       run: make
  #       timeout-minutes: 2
  #     - name: check-banned
  #       run: |
  #         IFS=',' read -ra array <<< "$EXECUTABLES"
  #         for arg in "${array[@]}"; do
  #           commands=nm "$arg" | grep "U " | cut -d 'U' -f 2 | cut -d '@' -f1
  #           IFS='\n' read -ra array <<< "$EXECUTABLES"
  #           for cmd in "${commands}"; do
  #             for func in "$AUTHORIZED"; do
  #               printf "%s -- %s\n" "$cmd" "$func"
  #               if [ "$cmd" != "$func" ]; then
  #                 printf "::error::Invalid use of %s" "$cmd"
  #                 exit 1
  #               fi
  #             done
  #           done
  #         done
  #         exit 0

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: run-tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    needs: run_tests
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: mirroring
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
